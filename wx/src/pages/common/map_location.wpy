<script>
  import wepy from 'wepy';
  import api from '../../api/api';
  import {
    USER_SPECICAL_INFO,
    USER_INFO,
    SYSTEM_INFO,
    ADDRESS_ID,
    USER_CITY,
    SEL_CLASS_CODE,
    USER_PHONE,
  } from "../../utils/constant";
  import {
    NOTIFI_ADDRESS_CHANGE,
    NOTIFI_CITY_CHANGE,
    NOTIFI_ORDER_SELECT_ADDRESS
  } from "../../utils/notif_const";

  let appConfig = require('../../utils/app_config');
  let amapFile = require('../../libs/amap-wx.js');
  let WxNotificationCenter = require("../../libs/WxNotificationCenter.js");
  // import WxValidate from '../../libs/WxValidate';
  import tip from '../../utils/tip';
  let touchTimeStampStart = 0;
  let touchTimeStampEnd = 0;
  export default class Location extends wepy.page {

    config = {
      navigationBarTitleText: '选择用车地点',
    };
    components = {};
    data = {
      screenHeight:700,
      pageShow:false,
      fromUrl: '',
      first: false,
      markers: [],
      latitude: '',
      longitude: '',
      textData: {
        name: '',
      },
      desc: '',
      city: '',
      cityCode: '',

      selfAddress: {
        latitude: '',
        longitude: '',
        textData: {
          name: '',
        },
        desc: '',
      },

      oldAddress: {
        latitude: '',
        longitude: '',
        textData: {
          name: '',
        },
        desc: '',
      },

      firstLoad: {
        latitude: '',
        longitude: '',
        projectName:'',
        textData: {
          name: '',
        },
        desc: ''
      },
      projectName:"",
      realName:'',
      phone:'',
      isShowRealname:false,
      pinAnimationData:{},
      shadowAnimationData:{},
      backMoreStep:false,
      isIphoneX:false,

      historyList:[],
      addressNum:0
    };

    methods = {
      // 屏幕移动
      regionchange(e) {
        let that = this;
        if (this.first) {
          this.first = false;
          // this.endSelectLocationAnimated();
          this.$apply();
          return
        }
        if (e.type === "begin") {
          console.log("begin", e.type);
          touchTimeStampStart = e.timeStamp;
          that.oldAddress = {
            latitude: that.latitude,
            longitude: that.longitude,
            projectName:that.projectName,
            textData: {
              name: that.textData.name,
            },
            desc: that.desc,
          };
          that.oldAddress = JSON.stringify(that.oldAddress);
          that.textData.name = "用车地点获取中...";
          that.projectName=""
          that.desc = "";

          this.beginSelectLocationAnimated();
          that.$apply();
        }

        if (e.type === "end") {
          touchTimeStampEnd = e.timeStamp;
          console.log("end", e.type);
          console.log(touchTimeStampStart, touchTimeStampEnd);
          // 加入时间判断
          // 解决修改data内数据导致地图在拖动开始时闪回原位的bug
          if (touchTimeStampEnd - touchTimeStampStart > 50) {
            this.mapCtx.getCenterLocation({
              success: async (res) => {
                let location = res.longitude + ',' + res.latitude;
                await that.getRegoMap({location: location}).then(data => {
                  let seaArea = data[0].regeocodeData.seaArea;
                  let province = data[0].regeocodeData.addressComponent.province || '';
                  let city = data[0].regeocodeData.addressComponent.city || '';
                  let district = data[0].regeocodeData.addressComponent.district || '';
                  let township = data[0].regeocodeData.addressComponent.township || '';
                  let formatted_address = data[0].regeocodeData.formatted_address || '';
                  let stree = data[0].regeocodeData.addressComponent.streetNumber.street || '';
                  let number = data[0].regeocodeData.addressComponent.streetNumber.number || '';
                  let address = data[0].regeocodeData.aois.length>0?data[0].regeocodeData.aois[0].name:'';

                  let finalAddress = ''
                  // dang stree 为空
                  if(stree && number && stree.length>0 && number.length>0){
                    finalAddress = city+district+township+stree+number+' '+address
                  }else{
                    finalAddress = formatted_address.replace(province,'');
                  }

                  // const address = typeof formatted_address === "string" ? formatted_address.replace(province, "").replace(city, "").replace(district, "") : '';
                  that.latitude = res.latitude;
                  that.longitude = res.longitude;
                  that.textData.name = finalAddress || seaArea;
                  that.projectName =  ( address?address:( city + (township || district)) )  || finalAddress;
                  that.endSelectLocationAnimated();

                  that.$apply();
                });

                let isInService = await that.cityInService(res.longitude, res.latitude);
                //如果不在服务区
                if (!isInService) {
                  wx.showModal({
                    content: '当前区域超出服务范围，正在努力拓展中',
                    showCancel: false,
                    confirmColor: '#FF8000',
                    confirmText: "我知道了",
                    success: res => {
                      if (res.confirm) {
                        let old = JSON.parse(that.oldAddress);
                        // that.latitude = Number(old.latitude);
                        // that.longitude = Number(old.longitude);
                        // that.textData.name = old.textData.name
                        // that.desc = old.desc;

                        that.latitude = that.firstLoad.latitude;
                        that.longitude = that.firstLoad.longitude;
                        that.textData.name = that.firstLoad.textData.name;
                        that.projectName = that.firstLoad.projectName;
                        that.desc = that.firstLoad.desc;
                        that.$apply();
                      }
                    }
                  });
                }

              }
            })
          } else {
            that.latitude = JSON.parse(that.oldAddress).latitude;
            that.longitude = JSON.parse(that.oldAddress).longitude;
            that.textData.name = JSON.parse(that.oldAddress).textData.name;
            that.projectName = JSON.parse(that.oldAddress).projectName;
            that.endSelectLocationAnimated();
          }


        }

      },

      update(){

      },

      selectInputAdress() {
        let that = this;
        const data = {
          longitude: that.longitude,
          latitude: that.latitude,
          address: that.textData.name,
          desc: that.desc,
          city: that.city,
          cityCode: that.cityCode,
          cbUrl: "/pages/common/location_search"
        };
        wx.navigateTo({
          url: "/pages/common/location_search?data=" + encodeURIComponent(JSON.stringify(data))
        });
      },

      //提交
      async submit() {
        let that = this;
        tip.loading();

        if( that.textData.name == "用车地点获取中..."){
          wx.showModal({
            content: '用车地点正在努力获取中...',
            showCancel: false,
            confirmColor: '#FF8000',
            confirmText: "我知道了",
            success: res => {
              if (res.confirm) {
                tip.loaded();
              }
            }
          });
          tip.loaded();
          return false
        }

        let params ={
          "address": this.textData.name,//用车地址
          "addressDesc": '',//用车地址明细
          "latitude":  that.latitude,//经度
          "longitude":  that.longitude,//纬度
          "projectName": that.projectName,//工程名称
          "userName": that.realName,//用车人姓名
          "userPhone": that.phone,//用车人电话
          city: that.city,
          cityCode: that.cityCode
        }

        let cityInfo = api.znGetStorageSync(USER_CITY);
        let isInService = await that.cityInService(params.longitude, params.latitude);
        //如果不在服务区
        if (isInService) {
          let obj = {
            regionId: that.cityCode,
            regionName: that.city
          };
          if (that.city && cityInfo.city !== that.city) {
            // WxNotificationCenter.postNotificationName(NOTIFI_CITY_CHANGE, obj);
          }
        }

        const result = await api.addAddress({
          method:"POST",
          query:params
        });
        if(result && result.data && result.data.errCode === 0){
          tip.success('保存成功！',800).then(()=>{
            WxNotificationCenter.postNotificationName(NOTIFI_ORDER_SELECT_ADDRESS, result.data.data);
            if(that.backMoreStep){
              wx.navigateBack({
                delta:2
              });
            }else {
              wx.navigateBack();
            }

          })
        }
      },

      moveCurrentLocation() {
        this.mapCtx.moveToLocation()
      },

      // 选择地址
      selectItem(item){
        let obj = item;
        WxNotificationCenter.postNotificationName(NOTIFI_ORDER_SELECT_ADDRESS, obj);
        wx.navigateBack({
          delta:1,
        });
      }

    };

    onLoad(options) {
      let that = this;
      tip.loading();
      this.isIphoneX = this.$parent.globalData.isIphoneX;

      wx.getSystemInfo({
        success: function(res) {
          if(res.errMsg == 'getSystemInfo:ok'){
            that.screenHeight = res.windowHeight;
            console.log(that.screenHeight);
            that.$apply();
          }
        }
      });
      this.init(options);
      this.$apply();
    }

    async init(options){
      tip.loading();
      let that = this;

      await this.getAddressList();

      let fromSearchSelectData = null;
      if(options.data){
        fromSearchSelectData = JSON.parse(decodeURIComponent(options.data));
      }else{
        fromSearchSelectData = JSON.parse(decodeURIComponent(options.params));
      }
      this.mapCtx = wx.createMapContext("map");
      console.log("fromSearchSelectData", fromSearchSelectData);
      this.first = true;
      that.fromUrl = fromSearchSelectData ? fromSearchSelectData.cbUrl : '';
      if (fromSearchSelectData && fromSearchSelectData.cbUrl === "/pages/common/location_search") {
        that.latitude = fromSearchSelectData.location.split(",")[1];
        that.longitude = fromSearchSelectData.location.split(",")[0];
        that.textData.name = fromSearchSelectData.district + fromSearchSelectData.address +' ' +fromSearchSelectData.name ;
        that.desc = fromSearchSelectData.desc || "";
        that.projectName = fromSearchSelectData.name;

        that.firstLoad.projectName = fromSearchSelectData.name;
        that.firstLoad.latitude = fromSearchSelectData.location.split(",")[1];
        that.firstLoad.longitude = fromSearchSelectData.location.split(",")[0];
        that.firstLoad.textData.name = fromSearchSelectData.district + fromSearchSelectData.address +' ' +fromSearchSelectData.name ;
        that.firstLoad.desc = "";

        that.backMoreStep = true;
      } else if (fromSearchSelectData && fromSearchSelectData.fromUrl === "/pages/order/place_order") {

        that.latitude = fromSearchSelectData.latitude;
        that.longitude = fromSearchSelectData.longitude;
        that.textData.name = fromSearchSelectData.textName;
        that.desc = fromSearchSelectData.desc || '';
        that.projectName = fromSearchSelectData.projectName;

        that.firstLoad.projectName = fromSearchSelectData.name;
        that.firstLoad.latitude = fromSearchSelectData.latitude;
        that.firstLoad.longitude = fromSearchSelectData.longitude;
        that.firstLoad.textData.name = fromSearchSelectData.textName;
        that.firstLoad.desc = fromSearchSelectData.desc || '';
        if(fromSearchSelectData.userName){
          that.realName = fromSearchSelectData.userName;
        }

      } else if (fromSearchSelectData && fromSearchSelectData.fromUrl === "/pages/common/address_list") {

        that.latitude = fromSearchSelectData.latitude;
        that.longitude = fromSearchSelectData.longitude;
        that.textData.name = fromSearchSelectData.textName;
        that.desc = fromSearchSelectData.desc || '';
        that.projectName = fromSearchSelectData.projectName;
        that.firstLoad.projectName = fromSearchSelectData.name;
        that.firstLoad.latitude = fromSearchSelectData.latitude;
        that.firstLoad.longitude = fromSearchSelectData.longitude;
        that.firstLoad.textData.name = fromSearchSelectData.textName;
        that.firstLoad.desc = fromSearchSelectData.desc || '';

      }
      tip.loaded();
      that.$apply();
    }

    onUnload() {
      let that = this;
      WxNotificationCenter.removeNotification(NOTIFI_ADDRESS_CHANGE, that);
    }

    getRegoMap(params) {
      return new Promise((resolve, reject) => {
        var key = appConfig.Config.amapKey;
        var myAmapFun = new amapFile.AMapWX({key: key});
        // 地图组件的id'
        if (params) {
          myAmapFun.getRegeo({
            location: params.location,
            success: (res) => resolve(res),
            fail: (res) => reject(res)
          });
        } else {
          myAmapFun.getRegeo({
            success: (res) => resolve(res),
            fail: (res) => reject(res)
          });
        }
      })
    }

    async cityInService(longitude, latitude, cb) {
      let result = await api.getCityInService({
        query: {
          invokeType: 2,
          longitude: longitude,
          latitude: latitude
        },
        showError: false
      });

      // let cityInfo = api.znGetStorageSync(USER_CITY);
      if (result && result.data && result.data.errCode === 0) {
        this.city = result.data.data.city.cityName;
        this.cityCode = result.data.data.city.cityCode;
        return true
      } else {
        return false
      }

    }

    beginSelectLocationAnimated() {
      const pinAnimation = wx.createAnimation({
        // transformOrigin: "50% 50%",
        duration: 200,
        timingFunction: "linear",
        delay: 0
      });

      const shadowAnimation = wx.createAnimation({
        // transformOrigin: "50% 50%",
        duration: 200,
        timingFunction: "linear",
        delay: 0
      });

      this.pinAnimationData = pinAnimation;
      this.shadowAnimationData = shadowAnimation;
      //sthis.$apply();

      pinAnimation.translate(0, -15).step();
      shadowAnimation.scale(2, 1.5)

    }

    endSelectLocationAnimated() {
      const animation = wx.createAnimation({
        // transformOrigin: "50% 50%",
        duration: 200,
        timingFunction: "linear",
        delay: 0
      });

      const shadowAnimation = wx.createAnimation({
        // transformOrigin: "50% 50%",
        duration: 200,
        timingFunction: "linear",
        delay: 0
      });


      this.pinAnimationData = animation;
      this.shadowAnimationData = shadowAnimation;
      // this.$apply();

      animation.translate(0, 0).step();
      shadowAnimation.scale(1, 1)

    }

    // 获取用车地址列表
    async getAddressList(){
      let that = this;
      let selectCode = 0;
      const result = await api.getAddressList({})
      if(result && result.data && result.data.errCode == 0){
        that.historyList = result.data.data;
        that.addressNum =  result.data.data && result.data.data.length>0 ? result.data.data.length : 0;
      }
      that.pageShow = true;
      that.$apply();
    };

  }

</script>

<template>
  <view wx:if="{{ pageShow }}">
    <view class="map_container" style="{{ addressNum == 2?( isIphoneX?('height:'+(screenHeight - 251 - 80)+'px'):('height:'+(screenHeight - 251)+'px') ):(addressNum == 1?( isIphoneX?('height:'+(screenHeight - 182 - 80)+'px'):('height:'+(screenHeight - 182)+'px') ):(addressNum == 0?(isIphoneX?('height:'+(screenHeight - 84 - 80)+'px'):('height:'+(screenHeight - 84)+'px') ):(''))) }}">
    <!--<view class="map_container" style="{{ addressNum == 2?(isIphoneX?'height:930rpx':'height:772rpx'):(addressNum == 1?(isIphoneX?'height:1054rpx':'height:896rpx'):(addressNum == 0?(isIphoneX?'height:1220rpx':'height:1060rpx'):(''))) }}">-->
    <!--<view class="map_container" style=" height:{{screenHeight - 80 }}px">-->
      <map class="map" id="map" longitude="{{longitude}}" latitude="{{latitude}}" scale="16"  markers="{{markers}}" bindregionchange="regionchange" bindupdated="update"  show-location >
        <cover-view class="icon-search-box" @tap="selectInputAdress">
            <cover-image src="../../images/img_dtss.png" class="img"></cover-image>
        </cover-view>
        <cover-view class="cover-location" >

          <cover-view animation="{{pinAnimationData}}"  class="cover-pin" >
            <cover-image class="img-pin" src="../../images/location_pin.png"></cover-image>
          </cover-view>

          <cover-view class="cover-shadow"  animation="{{shadowAnimationData}}" >
            <cover-image class="img-shadow" src="../../images/location_shadow.png"></cover-image>
          </cover-view>

        </cover-view>
        <cover-view class="cxdw" @tap="moveCurrentLocation">
          <cover-image class="img-cxdw" src="../../images/icon_cxdw.png"></cover-image>
        </cover-view>
      </map>
    </view>

    <view class="map_text">
      <view class="addressBox">
        <view class="projectName">{{projectName}}</view>
        <view class="address" >{{textData.name}}</view>
      </view>
      <button @tap="submit">确定</button>
    </view>

    <block wx:if="{{ historyList.length>0 }}">
      <view class="titip">最近使用地址</view>
      <view class="historyList">
        <view class="item" wx:for="{{historyList}}" wx:for-item="item" wx:for-index="orderIndex" wx:key="this" @tap="selectItem({{item}})">
          <view class="projectName">{{ item.projectName }}</view>
          <view class="addressName">{{ item.addressDetail }}</view>
          <icon class="selected" type="success_no_circle" size="16" color="#FF8000" wx:if="{{item.id == selectedId && type === 2}}"/>
        </view>
      </view>
    </block>

  </view>
</template>

<style lang="less">
  .icon-search-box{
    position: absolute;
    top: 10rpx;
    left: 0;
    width: 750rpx;
    height: 90rpx;
    .img{
      width: 750rpx;
      height: 90rpx;
    }
    .searchBox{

    }
  }
  .cover-location{
    width: 48rpx;
    height: 122rpx;
    position: absolute;
    left: 50%;
    top: 50%;
    margin-left: -25rpx;
    margin-top: -88rpx;

    .cover-pin{
      position: relative;
      z-index: 2;
      width: 48rpx;
      padding-top: 40rpx;
      .img-pin{
        width: 48rpx;
        height: 66rpx;
      }
    }
    .cover-shadow{
      width: 24rpx;
      position: relative;
      z-index: 1;
      top: -3rpx;
      margin: 0 auto;
      .img-shadow{
        width: 24rpx;
        height: 9rpx;
      }
    }


  }

  .cxdw{
    position: absolute;
    bottom: 20rpx;
    right: 20rpx;
    &:active{
      opacity: 0.8;
    }
    .img-cxdw{
      width: 80rpx;
      height: 80rpx;
    }
  }
  .map_container {
    position: relative;
    /*top: 0;*/
    height: 700rpx;
    /*left: 0;*/
    /*right: 0;*/
    z-index: 2;
    /*background: #FF8000;*/
  }

  .map {
    width: 100%;
    height: 100%;
  }

  .map_text {
    position: relative;
    background: #fff;
    padding: 0 20rpx 0rpx;
    height: 84px;
    z-index: 3;
    .addressBox {
      width: 550rpx;
      padding: 10px 0;
      position: relative;
      input{
        &.placeholder{
          color: #999;
        }
        font-size: 32rpx;
        line-height: 46rpx;
        padding: 20rpx 0;
        border-bottom: 1px solid #E5E5E5;
        color: #333333;
        width: 100%;
      }
      .projectName{
        font-size: 34rpx;
        color: #333333;
        line-height: 24px;
        height:24px;
        max-width: 550rpx;
        overflow: hidden;
        text-overflow:ellipsis;
        white-space: nowrap;
      }
      .address{
        font-size: 28rpx;
        line-height: 20px;
        margin-top: 5rpx;
        width: 100%;
        color: #747474;
        height: 40px;
        display: -webkit-box ;
        overflow: hidden;
        text-overflow: ellipsis;
        word-break: break-all;
        -webkit-box-orient: vertical;
        -webkit-line-clamp:2;
      }
    }
    button{
      padding: 0;
      margin: 0;
      width: 120rpx;
      height: 60rpx;
      line-height: 60rpx;
      border-radius: 5rpx;
      text-align: center;
      border: 0;
      font-size: 28rpx;
      color: #FFFFFF;
      background-color: #FF8000;
      position: absolute;
      right: 20rpx;
      top: 50%;
      margin-top: -15rpx;
      &:after,&:before{
        border: 0;
      }
    }
  }

  .titip{
    margin-top: 10px;
    height: 20px;
    font-size: 24rpx;
    line-height: 40rpx;
    color: #747474;
    background-color: #ffffff;
    padding: 5px 20rpx;
  }
  .historyList{
    background-color: #ffffff;
   /* max-height: 300rpx;
    overflow: hidden;
    overflow-y:auto;*/

    .item{
      margin-left: 20rpx;
      padding: 10px 20rpx 10px 0;
      border-top: 1px solid #E5E5E5;
      position: relative;

      &:first-child{
        border-top: 0;
        padding: 0 20rpx 10px 0;
      }
      .addressName{
        font-size: 28rpx;
        color: #747474;
        line-height: 40rpx;
        overflow: hidden;
        text-overflow:ellipsis;
        white-space: nowrap;
        height: 24px;
      }
      .projectName{
        font-size:32rpx;
        color: #333333;
        line-height: 44rpx;
        height: 24px;
        margin-top: 0rpx;
        overflow: hidden;
        text-overflow:ellipsis;
        white-space: nowrap;
      }
      .selected{
        position: absolute;
        right: 20rpx;
        top: 50rpx;
      }
    }
  }

  .hideRealNameBox{
    .map_container{
      bottom:205rpx;
    }
    .map_text{
      height:205rpx;
    }
  }



</style>
