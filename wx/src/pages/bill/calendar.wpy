<template>
  <view class="calendar-wrap" wx:if="{{ pageShow }}">
    <block>
      <view style="position:fixed;top:0;background:#F5F5F5;font-size: 30rpx; padding-top: 10rpx;padding-bottom: 10rpx;">
        <view class="layout-flex row" style="background-color: #F5F5F5;">
          <text class="date-week" style="width:{{systemInfo.windowWidth/7-10}}px;height:20px" wx:for="{{weekStr}}" wx:key="{{index}}">
            <text wx:if="{{item !=='日' && item !=='六'}}">{{item}}</text>
            <text wx:if="{{item ==='日' || item ==='六'}}" class="week">{{item}}</text>
          </text>
        </view>
      </view>
      <view style="margin-top:50px"></view>
      <view wx:for="{{dateList}}" wx:key="{{index}}" wx:for-item="dateItem" style="padding:5px 0">
        <view class="date-year-month" style="text-align: center;font-size:35rpx;">{{dateItem.year}}年{{dateItem.month}}月</view>
        <view class="layout-flex row" style="flex-wrap: wrap;margin-top:20rpx;">
          <view class="date-day {{item.price?'bgitem':''}}" style="width:{{systemInfo.windowWidth/7-10}}px;height:{{systemInfo.windowWidth/12}}px;" data-year="{{dateItem.year}}" data-month="{{dateItem.month}}" data-day="{{item.day}}" bindtap="onPressDate" wx:for="{{dateItem.days}}"
                wx:key="{{index}}">
          <!--<view class="date-day" style="width:{{systemInfo.windowWidth/7-10}}px;height:{{systemInfo.windowWidth/12}}px;" data-year="{{dateItem.year}}" data-month="{{dateItem.month}}" data-day="{{item.day}}" bindtap="onPressDate" wx:for="{{dateItem.days}}"-->
                <!--wx:key="{{index}}">-->
            <view class='item-days {{item.className}}' >
            <!--<view class='item-days' >-->
              <text style='font-size:28rpx;'>{{item.day>0?(item.daytext?item.daytext:item.day):''}}</text>
              <text class="price {{item.price == '¥0'?'redPrice':'' }}" style='font-size:26rpx;' wx:if="{{item.day>0 && item.price}}">{{ item.price }}</text>
              <!--<text style='font-size:30rpx;' wx:if="{{item.inday && operation == '2'}}">起租</text>-->
              <!--<text style='font-size:30rpx;' wx:if="{{item.outday && operation == '2'}}">退租</text>-->
            </view>
          </view>
        </view>
      </view>
    </block>
  </view>
</template>
<script>
  import wepy from 'wepy';
  import api from '../../api/api';
  import AuthorPop from '../../components/authorization_pop';

  var Moment = require("../../utils/moment.js");
  var DATE_LIST = [];
  var DATE_YEAR = new Date().getFullYear();
  var DATE_MONTH = new Date().getMonth() + 1;
  var DATE_DAY = new Date().getDate();

  export default class calendar extends wepy.page {
    config = {
      navigationBarTitleText: '设备费用明细',
      navigationBarBackgroundColor: '#FFFFFF',
      navigationBarTextStyle: 'black',
    };

    data = {
      pageShow:true,
      maxMonth: '', //最多渲染月数
      dateList: [],
      systemInfo: {},
      weekStr: ['日', '一', '二', '三', '四', '五', '六'],
      operation:'2', // 0: 不能点击  2:选中时间段
      checkInDate: '', //选中开始时间
      checkOutDate: '', //选中结束时间
      markcheckInDate: false, //标记开始时间是否已经选择
      markcheckOutDate: false,   //标记结束时间是否已经选择
      sFtv: [
        {
          year:2018,
          month: 7,
          day: 20,
          name: "今天",
          price:'¥200',
          className:''
        },
        {
          year:2018,
          month: 7,
          day: 25,
          name: "",
          price:'¥200',
          className:''
        },{
          year:2019,
          month:1,
          day:1,
          name:"",
          price:'¥200',
          className:''
        }
        ]
    }

    onLoad (options,data) {
      var _this = this;
      console.log('onLoad',options,data)

      var maxMonth = data.preload.maxMonth;
      // 页面初始化 options为页面跳转所带来的参数
      var checkInDate = data.preload.beginTime ? data.preload.beginTime : Moment(new Date()).format('YYYY-MM-DD');
      var checkOutDate = data.preload.endTime ? data.preload.endTime : Moment(new Date()).add(1, 'day').format('YYYY-MM-DD');
      var sFtv = data.preload.sFtv ? data.preload.sFtv : [];
      _this.$apply(()=>{
        _this.checkOutDate =  checkOutDate;
        _this.checkInDate =  checkInDate;
        _this.maxMonth =  maxMonth;
        _this.sFtv =  sFtv;
      });
      console.log('maxMonth',_this.maxMonth,maxMonth,data.preload.maxMonth)
      _this.createDateListData();

      if(_this.operation == '0'){
        wx.getSystemInfo({
          success: function (res) {
            _this.$apply(()=>{
              _this.systemInfo =  res;
            });
          }
        })
      }

      if(_this.operation == '2'){


        wx.getSystemInfo({
          success: function (res) {
            _this.$apply(()=>{
              _this.systemInfo =  res;
            });
          }
        })
      }


    }

    onShow () {
      if(this.operation == '2'){
        this.selectDataMarkLine()
      }
    }

    methods={
      /**
       * 点击日期事件
       */
      onPressDate (e) {
        if (this.operation == '0') {
          return
        }

        if (this.operation == '2') {
          return
          var {year, month, day} = e.currentTarget.dataset;
          //当前选择的日期为同一个月并小于今天，或者点击了空白处（即day<0），不执行
          if ((day < DATE_DAY && month == DATE_MONTH) || day <= 0) return;

          var tempMonth = month;
          var tempDay = day;

          if (month < 10) tempMonth = '0' + month
          if (day < 10) tempDay = '0' + day

          var date = year + '-' + tempMonth + '-' + tempDay;

          //如果点击选择的日期A小于入住时间，则重新渲染入住时间为A
          if ((this.markcheckInDate && Moment(date).before(this.checkInDate) || this.checkInDate === date)) {
            this.$apply(() => {
              this.markcheckInDate = false;
              this.markcheckOutDate = false;
              this.dateList = JSON.parse(DATE_LIST).concat();
            });
          };
          if (!this.markcheckInDate) {
            this.$apply(() => {
              this.checkInDate = date;
              this.markcheckInDate = true;
              this.dateList = JSON.parse(DATE_LIST).concat();
            });
          } else if (!this.markcheckOutDate) {
            this.$apply(() => {
              this.checkOutDate = date;
              this.markcheckOutDate = true;
            });
            //设缓存，返回页面时，可在onShow时获取缓存起来的日期
            wx.setStorage({
              key: 'ROOM_SOURCE_DATE',
              data: {
                checkInDate: this.checkInDate,
                checkOutDate: this.checkOutDate
              }
            });
            wx.navigateBack({
              delta: 1, // 回退前 delta(默认为1) 页面
            });
          }

          this.renderPressStyle(year, month, day);
        }
      }

    }

    //选择的入住与离店时间段
    selectDataMarkLine () {
      let dateList = this.dateList;
      let checkInDate = this.checkInDate;
      let checkOutDate = this.checkOutDate;
      let curreInid = checkInDate.substr(0, 4) + "-" + (checkInDate.substr(5, 2) < 10 ? checkInDate.substr(6, 1) : checkInDate.substr(5, 2));//选择入住的id
      let curreOutid = checkOutDate.substr(0, 4) + "-" + (checkOutDate.substr(5, 2) < 10 ? checkOutDate.substr(6, 1) : checkOutDate.substr(5, 2));//选择离店的id
      let dayIn = checkInDate.substr(8, 2) >= 10 ? checkInDate.substr(8, 2) : checkInDate.substr(9, 1);//选择入住的天id
      let dayOut = checkOutDate.substr(8, 2) >= 10 ? checkOutDate.substr(8, 2) : checkOutDate.substr(9, 1);//选择离店的天id
      let monthIn = checkInDate.substr(5, 2) >= 10 ? checkInDate.substr(5, 2) : checkInDate.substr(6, 1);//选择入店的月id
      let monthOut = checkOutDate.substr(5, 2) >= 10 ? checkOutDate.substr(5, 2) : checkOutDate.substr(6, 1);//选择离店的月id
      if (curreInid == curreOutid) {//入住与离店是当月的情况
        for (let i = 0; i < dateList.length; i++) {
          if (dateList[i].id == curreInid) {
            let days = dateList[i].days;
            for (let k = 0; k < days.length; k++) {
              if (days[k].day >= dayIn && days[k].day <= dayOut) {
                days[k].class = days[k].class + ' bgitem';
              }
              if (days[k].day == dayIn) {
                days[k].class = days[k].class + ' beginActive'; //active
                days[k].inday = true;
              }
              if (days[k].day == dayOut) {
                days[k].class = days[k].class + ' endActive';
                days[k].outday = true;
              }
            }
          }
        }
      } else {//跨月
        for (let j = 0; j < dateList.length; j++) {
          if (dateList[j].month == monthIn) {//入住的开始月份
            let days = dateList[j].days;
            for (let k = 0; k < days.length; k++) {
              if (days[k].day >= dayIn) {
                days[k].class = days[k].class + ' bgitem';
              }
              if (days[k].day == dayIn) {
                days[k].class = days[k].class + ' active';
                days[k].inday = true;
              }
            }
          } else {//入住跨月月份
            if (dateList[j].month < monthOut && dateList[j].month > monthIn) {//离店中间的月份
              let days = dateList[j].days;
              for (let k = 0; k < days.length; k++) {
                days[k].class = days[k].class + ' bgitem';
              }
            } else if (dateList[j].month == monthOut) {//离店最后的月份
              let days = dateList[j].days;
              for (let k = 0; k < days.length; k++) {
                if (days[k].day <= dayOut) {
                  days[k].class = days[k].class + ' bgitem';
                }
                if (days[k].day == dayOut) {
                  days[k].class = days[k].class + ' active';
                  days[k].outday = true;
                }
              }
            }
          }
        }
      }

      this.$apply(()=>{
        this.dateList = dateList
      });
    }

    createDateListData () {
      let dateList = [];
      let now = new Date(this.checkInDate);
      /*
        设置日期为 年-月-01,否则可能会出现跨月的问题
        比如：2017-01-31为now ,月份直接+1（now.setMonth(now.getMonth()+1)），则会直接跳到跳到2017-03-03月份.
          原因是由于2月份没有31号，顺推下去变成了了03-03
      */
      now = new Date(now.getFullYear(), now.getMonth(), 1);
      for (var i = 0; i < this.maxMonth; i++) {
        var momentDate = Moment(now).add(this.maxMonth - (this.maxMonth - i), 'month').date;
        var year = momentDate.getFullYear();
        var month = momentDate.getMonth() + 1;

        var days = [];
        var totalDay = this.getTotalDayByMonth(year, month);
        var week = this.getWeek(year, month, 1);
        //-week是为了使当月第一天的日期可以正确的显示到对应的周几位置上，比如星期三(week = 2)，
        //则当月的1号是从列的第三个位置开始渲染的，前面会占用-2，-1，0的位置,从1开正常渲染
        for (var j = -week + 1; j <= totalDay; j++) {
          var tempWeek = -1;
          if (j > 0)
            tempWeek = this.getWeek(year, month, j);
          var clazz = '';
          if (tempWeek == 0 || tempWeek == 6)
            clazz = 'week'
          if (j < DATE_DAY && year == DATE_YEAR && month == DATE_MONTH && this.operation != '2')
          //当天之前的日期不可用
            clazz = 'unavailable ' + clazz;
          else
            clazz = '' + clazz
          days.push({ day: j, class: clazz })
        }
        var dateItem = {
          id: year + '-' + month,
          year: year,
          month: month,
          days: days,
        }

        dateList.push(dateItem);
      }
      console.log('c-for-maxMonth',this.maxMonth,dateList)
      let sFtv = this.sFtv;
      for (let i = 0; i < dateList.length; i++){//加入公历节日
        for(let k = 0; k < sFtv.length; k++){
          if(dateList[i].year == sFtv[k].year){
            if (dateList[i].month == sFtv[k].month){
            let days = dateList[i].days;
            for (let j = 0; j < days.length; j++){
              if (days[j].day == sFtv[k].day){
                days[j].daytext = sFtv[k].name
                days[j].price = sFtv[k].price
                days[j].className = sFtv[k].className
              }
            }
          }
          }
        }
      }
      console.log('createDateListData-dateList',dateList)
      DATE_LIST = dateList && dateList.length>0?JSON.stringify(dateList):dateList;
      console.log('createDateListData-DATE_LIST',DATE_LIST)
      this.$apply(()=>{
        this.dateList = dateList;
      });
    }


    /*
	 * 获取月的总天数
	 */
    getTotalDayByMonth (year, month) {
      month = parseInt(month, 10);
      var d = new Date(year, month, 0);
      return d.getDate();
    }

    /*
	 * 获取月的第一天是星期几
	 */
    getWeek (year, month, day) {
      var d = new Date(year, month - 1, day);
      return d.getDay();
    }

    renderPressStyle (year, month, day) {
      var dateList = this.dateList;
      //渲染点击样式
      for (var i = 0; i < dateList.length; i++) {
        var dateItem = dateList[i];
        var id = dateItem.id;
        if (id === year + '-' + month) {
          var days = dateItem.days;
          for (var j = 0; j < days.length; j++) {
            var tempDay = days[j].day;
            if (tempDay == day) {
              days[j].class = days[j].class + ' active';
              days[j].inday = true;
              break;
            }
          }
          break;
        }
      }

      this.$apply(()=>{
        this.dateList = dateList;
      });

    }

  }
</script>
<style lang="less">
  page {
    background-color: #ffffff;
  }

  .calendar-wrap{
    padding-bottom: 68rpx;
    -webkit-user-select:none;user-select:none;width:100%;overflow-x:hidden;
    /* pages/dateSelect/dateSelect.wxss */
    .date-day{
      color: #333333;
      display: flex;
      padding:2px 5px;
      margin:5px 0;
      text-align:center;
      justify-content: center;
      align-items: center;
      flex-direction: column;
    }
    .date-day.bgitem{
      background-color: #FFF6DE;
    }
    .date-day.active{
      background: #FFF6DE;
      /*color:#FFF;*/

    }
    .date-day.unavailable{
      color:#aaa;
    }

    .date-week{
      display: flex;
      justify-content: center;
      align-content: center;
      margin:5px;
    }
    .week{
      /*color:#099FDE;*/
    }
    .row{
      display: flex;
      flex-direction: row;
    }
    .item-days{
      display: flex;
      flex-direction:column;
      justify-content: center;
      align-items: center;
      font-size: 35rpx;
      color:inherit;
    }
    .item-days .price{
      color: #ff8000;
    }
    .item-days .redPrice{
      color: red;
    }
    .bgwhite{
      background-color: #fff;
    }

  }
</style>
