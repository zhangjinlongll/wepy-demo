<template>
  <block>
    <view class="shareLoginBox" wx:if="{{ isLogin && isAuthor}}">
      <view class="mask" ></view>
      <image src="{{ bg_img }}" style="position: fixed;width: inherit;height: inherit;left: 0;right: 0;top: 0;bottom: 0;z-index: 1"></image>
      <!--<image class="red_packet_bottom_bg" src=""></image>-->
      <view class="dialogBox">
        <view class="dialogHead">微信授权</view>
        <view class="dialogBody">
          <view class="">众能联合申请获得您的公开信息(头像、昵称等)</view>
        </view>
        <view class="dialogFoot">
          <button open-type="getUserInfo" bindgetuserinfo="getWxUserInfo">授权登录</button>
        </view>
      </view>
    </view>
  </block>
</template>
<script>
  import wepy from 'wepy';
  import api from '@/api/api';
  import tip from '@/utils/tip';
  import utils from '@/utils/util';
  import {
    USER_SPECICAL_INFO,
    USER_INFO,
    USER_PHONE,
    USER_CITY,
    INVITER
  } from "@/utils/constant";

  import {
    NOTIFI_CITY_CHANGE
  } from "@/utils/notif_const";

  var WxNotificationCenter = require("@/libs/WxNotificationCenter.js");
  export default class authorization_pop extends wepy.component {
    data = {
      isLogin: true,
    };

    props = {
      isAuthor: {
        type:Boolean,
        default:false
      } // 是否授权
    };

    methods={
      async getWxUserInfo(res) {
        let that = this;
        if (res.detail.errMsg === 'getUserInfo:ok') {
          await api.znSetStorageSync(USER_INFO, res);
          await that.setLogin();
        }
      }
    }

    watch={
      isAuthor(){
        if(!this.isAuthor){
          this.setLogin();
        }
      }
    }


    async setLogin() {
      let that = this;
      let isLogin = await that.$parent.$parent.reLogin().catch(error => {
        console.log("relogin error", error);
        wx.showModal({
          content: '用户信息授权失败，请联系众能联合客服'
        });
      });
      if (!isLogin) {
        return false
      }
      let isAddress = await that.$parent.$parent.getAddress().catch(error => {
        let cityInfo = api.znGetStorageSync(USER_CITY);
        if (cityInfo) {
          return isAddress = true
        } else {
          if (error.errMsg === "getLocation:fail auth deny") {
            wx.showModal({
              content: '定位授权失败,是否打开定位授权?',
              success: res => {
                if (res.confirm) {
                  wx.openSetting();
                }
                if (res.cancel) {
                  wx.navigateTo({
                    url: '/pages/common/city_list?city=no'
                  });
                }
              }
            });
          } else {
            wx.showModal({
              content: '您当前不在服务城市，请选择服务城市',
              success: res => {
                if (res.confirm) {
                  wx.navigateTo({
                    url: '/pages/common/city_list?city=no'
                  });
                }
              }
            });
          }
        }
      });
      if (!isAddress) {
        return false
      } else if (isAddress == "getCityInServiceFalse") {
        let cityInfo = api.znGetStorageSync(USER_CITY);
        if (cityInfo) {
          isAddress = true;
        } else {
          wx.showModal({
            content: '您当前不在服务城市，请选择服务城市',
            success: res => {
              if (res.confirm) {

                wx.navigateTo({
                  url: '/pages/common/city_list?city=no'
                });
              }
            }
          });
          return false
        }
      }
      if (isLogin && isAddress) {
        that.$apply(()=>{
          that.isLogin = false;
        });
        console.log()
        that.$emit('loginCb');
      } else if (isLogin && !isAddress) {
        wx.showModal({
          content: '您当前不在服务城市，请选择服务城市',
          success: res => {
            if (res.confirm) {
              wx.navigateTo({
                url: '/pages/common/city_list?city=no'
              });
            }
          }
        });
      } else {
        wx.showModal({
          content: '授权失败，请重新授权',
          success: res => {
            if (res.confirm) {
            }
          }
        });
      }
    }

    cityChanged(newCity) {
      let that = this.observer;
      if (newCity) {
        let cityInfo = {};
        cityInfo.city = newCity.regionName;
        cityInfo.cityName = newCity.regionName;
        cityInfo.cityCode = newCity.regionId;
        api.znSetStorageSync(USER_CITY, cityInfo)
      }
      that._init();
    }


  }
</script>
<style lang="less">
  .share-bill-wrap{
    .shareLoginBox{
      .mask{
        position: fixed;
        z-index: 99;
        top: 0;
        right: 0;
        left: 0;
        bottom: 0;
        background: rgba(0,0,0,.6);
      }
      .dialogBox{
        z-index: 100;
        width: 80%;
        position: fixed;
        max-width: 300px;
        top: 45%;
        left: 50%;
        transform: translate(-50%,-50%);
        text-align: center;
        border-radius: 3px;
        overflow: hidden;
        background-color: #ffffff;
        .dialogHead{
          text-align: center;
          //font-weight: 700;
          font-size: 18px;
          padding: 0.8em 0em .2em;
          line-height: 30px;
          margin-top: 0;
          color:'#000000';
        }
        .dialogBody{
          max-height: 300px;
          overflow-y: auto;
          padding: 0.2em 1.6em .8em;
          min-height: 40px;
          font-size: 16px;
          line-height: 1.3;
          word-wrap: break-word;
          word-break: break-all;

          .content{
            font-size: 36rpx;
            color: #F94747;
            text-align: center;
            margin-top: 30rpx;
          }
          .tip{
            font-size: 30rpx;
            color: #747474;
            text-align: center;
            margin-top: 18rpx;
            padding-bottom:20rpx;
          }
          input{
            border: 1px solid #E5E5E5;
            font-size: 30rpx;
            color: #333;
            letter-spacing: 0;
            height: 80rpx;
            line-height: 80rpx;
            padding: 0 20rpx;
            text-align: left;
            &.placeholder{
              font-size: 30rpx;
              color: #757575;
            }
          }
        }
        .dialogFoot{
          position: relative;
          line-height: 48px;
          font-size: 18px;
          display: flex;
          button{
            display: block;
            flex: 1;
            color: #FF8000;
            text-decoration: none;
            border-radius: 0;
            -webkit-tap-highlight-color: rgba(0,0,0,0);
            position: relative;
            border: 0;

            &:active{
              background-color: #eee
            }
            &:after,&:before,&::after{
              border: none;
              border-radius: 0;
            }
            &.cancel{
              color: #333;
            }
            &.sure{
              &:after{
                content: " ";
                position: absolute;
                left: 0;
                top: 0;
                width: 1px;
                bottom: 0;
                border-left: 1px solid #d5d5d6;
                color: #d5d5d6;
                transform-origin: 0 0;
                transform: scaleX(.5);
              }
            }
          }
          &:after{
            content: " ";
            position: absolute;
            left: 0;
            top: 0;
            right: 0;
            height: 1px;
            border-top: 1px solid #d5d5d6;
            color: #d5d5d6;
            transform-origin: 0 0;
            transform: scaleY(.5);
          }
        }
      }

    }
  }
</style>
