<style lang="less">
  @import "./styles/base";
  @import "./styles/icon";
  @import "./styles/style";
</style>
<script>
  import wepy from 'wepy';

  import 'wepy-async-function';
  import ZnAnalytics from './utils/ZNAnalytics_Web'

  import tip from './utils/tip'
  import {
    USER_SPECICAL_INFO,
    USER_INFO,
    SYSTEM_INFO,
    ADDRESS_ID,
    USER_CITY,
    SEL_CLASS_CODE,
    USER_PHONE,
    ORDER_PARAMS,
    SHOPPING_CARS
  } from "./utils/constant";

  import api from './api/api';

  var appConfig = require('./utils/app_config');
  var amapFile = require('./libs/amap-wx.js');
  var mta = require('./libs/mta_analysis.js');
  var constants = require('./utils/constant.js');
  var utilMd5 = require('./utils/md5.js');
  let ZnAnalyticsWx = new ZnAnalytics();
  export default class extends wepy.app {
    //  页面配置 --->  对应 app.json 文件
    config = {
      // 引入页面
      pages: [
        'pages/main/authorization',
        'pages/main/home',
        'pages/main/mine',
        'pages/main/bill',
        'pages/main/order',
        'pages/main/product_detail',
        'pages/main/login',
        'pages/main/web_sign',
        'pages/common/location_search',
        'pages/common/map_location',
        'pages/common/city_list',
        "pages/common/edit_address",
        "pages/common/address_list",
        "pages/common/repair_address_list",
        "pages/share/activity_rules",
        // "pages/share/turntable",
        "pages/share/activity_1212",
        'pages/share/share_bill',
        'pages/share/preview_bill',
      ],

      subPackages: [
        {
          root: "pages/mine",
          pages: [
            'my_info',
            'personal_authentication',
            'personal_authentication_info',
            'personal_authentication_rule',
            'company_authentication',
            'company_authentication_info',
            'credit_criteria',
            'credit_info',
            'credit_info_gray',
            'company_credit_info',
            'coupon_list',
            'coupon_rule',
            'repair_list',
            'business_policy',
          ]
        },
        {
          root: "pages/order",
          pages: [
            'place_order',
            'order_detail',
            'upload_setfile',
            'order_sign_result',
            'order_start_pay',
            'order_pay_result',
            'create_sign_person',
            'pay_coupon_list',
            'show_order_pic',
            'device_detail_list',
            'repair_order',
            'repair_order_info'
          ]
        },
        {
          root: "pages/bill",
          pages: [
            'pay_record_list',
            'coupon_record_list',
            'refund_record_list',
            'bill_start_pay',
            'bill_pay_result',
            'calendar'
          ]
        },
        {
          root: "pages/activity",
          pages: [
            // "pages/share/coupon_share",
            // "pages/share/red_packet_share",
            // "pages/share/activity",
            // "pages/share/activity_rules",
            //"turntable",
            // "pages/share/activity_1212",
          ]
        }
      ],

      // 界面设置
      window: {
        backgroundTextStyle: 'dark', //下拉 loading 的样式，仅支持 dark/light
        navigationBarBackgroundColor: '#FF8000',
        navigationBarTitleText: '',
        navigationBarTextStyle: 'white',
        enablePullDownRefresh: false,
        backgroundColor: '#efefef'
      },

      // 导航栏设置
      "tabBar": {
        "color": "#868a8d",
        "selectedColor": "#FF8000",
        "backgroundColor": "#ffffff",
        "borderStyle": "black",
        "list": [{
            "pagePath": "pages/main/home",
            "text": "首页",
            "iconPath": "images/icon_home.png",
            "selectedIconPath": "images/icon_home_active.png"
          },

          {
            "pagePath": "pages/main/order",
            "text": "订单",
            "iconPath": "images/icon_classify.png",
            "selectedIconPath": "images/icon_classify_active.png"
          },

          {
            "pagePath": "pages/main/bill",
            "text": "对账",
            "iconPath": "images/icon_bill.png",
            "selectedIconPath": "images/icon_bill_active.png"
          },
          {
            "pagePath": "pages/main/mine",
            "text": "我的",
            "iconPath": "images/icon_info.png",
            "selectedIconPath": "images/icon_info_active.png"
          }
        ]
      },
      "permission": {
        "scope.userLocation": {
          "desc": "您的地址信息将用于确定施工用车地址"
        }
      }
    } //config end

    //全局data
    globalData = {
      wxUserInfo: null,
      userInfo: null,
      isLogin: false,
      cityInfo: null,
      tokenId: null,
      isHasPhone: false,
      isIphoneX:false,
      registerCoupon:false,// 是否开启注册券
      orderCoupon:false,// 是否开启券
      screenH:0,
    }

    /*
     * 自定义方法
     */
    constructor() {
      super();
      this.use('requestfix');
      this.use('promisify');
    }

    onHide() {
    }

    onShow(options){
      console.log('app--->',options);
      if(options.path == 'pages/share/coupon_share'){
        api.znSetStorageSync('share',1)
      }else if(options.path == 'pages/share/activity'){
        api.znSetStorageSync('share',1)
      }else if(options.path == 'pages/share/z'){
        api.znSetStorageSync('share',1)
      }
    }

    //生命周期
    async onLaunch(options) {

      console.log('app--->onLaunch',options);
      let that = this;
      ZnAnalyticsWx.setAppId('wx19cdd2c551adae4c');
      try {
        wx.getSystemInfo({
          success: function(res) {
            that.globalData.screenH = res.screenHeight;
            if(res.model.indexOf("iPhone X")>-1){
              console.log(res.model);
              that.globalData.isIphoneX = true;
            }
          }
        })
      } catch (e) {
        // Do something when catch error
        wx.showModal({
          title: '提示',
          content: '当前微信版本过低，无法使用该功能，请升级到最新微信版本后重试。'
        })
      }


      api.znSetStorageSync(SHOPPING_CARS,{
        shoppingCarsTotal: 0,
        shoppingCarsList:[]
      });

      api.znSetStorageSync(USER_CITY,'');

     this.setLocalOrderParams();


      /*
      TODO 判断是否更新
      */
      await this.checkUpdate();

      /*
      TODO 判断是否授权
      */
      await this.checkGetUserInfo();

      mta.App.init({
        "appID": appConfig.Config.mtaKey,
        "eventID": "500609155",
        "statPullDownFresh": true,
        "statShareApp": true,
        "statReachBottom": true,
        "lauchOpts": options // 分析渠道
      });
    }

    setLocalOrderParams(){
      let  orderParams ={
        usesDays:0, //用车天数
        addressParams:{
          isShowAddressInfo:false, // 默认展示点击选择用车地址按钮
          selectedId:0, // 选中的地址id
          userName:'', // 用车联系人
          userPhone:'', // 用车联系人手机
          userAddress:'', // 用车地址
          carAddressCode: "", // 用车地址编码
          userCity:'', // 用车城市
          userLat:'', // 用车地址纬度
          userLon:'', // 用车地址经度
          storeName:'', // 仓库名称
          storeAddress:'', // 仓库地址
          storeLat:'', // 仓库地址纬度
          storeLon:'', // 仓库地址经度
          storeCode: "", // 仓库编码
        },
        projectName:'', // 项目名称
        totalMileage:'', // 公里数
        sendType: 1, // 配送方式 1 配送 0自提
        freight:0, // 运费
        rent:0, // 租金
        totalPrice:0, // 总费用
        beginUseDate:{
          fullDate:'',
          date:'', // 日期 例：07月28日
          time:'', // 时间 例：08：00
          week:''  // 星期 例：周六
        }, // 开始用车时间
        remarks:"", // 备注
        tempTime:'',
        dateRang:null,
        deliverTime:'',
      }
      api.znSetStorageSync(ORDER_PARAMS,orderParams);
    }

    async reLogin() {
      let that = this;
      let isPass = false;

      let wxLoginState = await new Promise((resolve, reject) => {
        wx.login({
          success: (res) => {
            if (res.errMsg == "login:ok") {
              resolve(res);
            } else {
              reject(res.errMsg)
            }
          },
          fail: (err) => {
            reject(err)
          }
        });
      });

      let loginState = await new Promise((resolve, reject) => {
        let wxUserInfo = api.znGetStorageSync(USER_INFO);
        let avartar= '';
        let nickName= '';
        if(wxUserInfo && wxUserInfo.detail && wxUserInfo.detail.userInfo  ){
          nickName =  wxUserInfo.detail.userInfo.nickName;
          // 过滤表情符号
          // nickName ='😍☆★♀♂ O(∩_∩)O~ (⛳😍☆★♀♂ O(∩_∩)O~ $%^@*!&&@%^!&*&*(!$@^(⛳' || nickName.replace(/\uD83C[\uDF00-\uDFFF]|\uD83D[\uDC00-\uDE4F]/g, "");
          avartar =  wxUserInfo.detail.userInfo.avatarUrl;
        }
        wx.request({
          url: api.apiMall + '/api-sso/api/v1/cust/getSessionInfo',
          data: {
            code: wxLoginState.code,
            source: 1,
            nickName:nickName,
            avartar:avartar,
          },
          method: 'GET',
          success: function (res) {
            console.log("getSessionInfo", res);
            if (res.data.errCode == 0) {
              that.setUidLogs(res.data.data.userInfo.userId);
              that.setSidLogs(utilMd5.hex_md5(res.data.data.userInfo.openId+'_'+new Date()));
              resolve(res.data);
            } else {
              that.setErrorsLogs({
                event_id: 'getSessionInfo_error',
                ts:new Date(),
                params:{
                  url: api.apiMall + '/api-sso/api/v1/cust/getSessionInfo',
                  code: wxLoginState.code,
                  source: 1,
                  nickName:nickName,
                  avartar:avartar
                }
              });
              reject(res.data);
            }
          },
          fail: function (error) {
            reject(error)
          }
        });
      });

      if (loginState) {
        api.znSetStorageSync(USER_SPECICAL_INFO, loginState.data);
        return isPass = true;
      } else {
        api.znSetStorageSync(USER_SPECICAL_INFO, '');
        return isPass = false;
      }
    }

    async getAddress() {
      let that = this;
      let isPass = false;
      let addressInfo = api.znGetStorageSync(USER_CITY);
      let addressState = await new Promise((resolve, reject) => {
        wx.getLocation({
          type: 'gcj02',
          // type: 'wgs84',
          success: function (res) {
            if (res.errMsg == "getLocation:ok") {
              resolve(res);
            } else {
              reject(res.errMsg);
            }
          },
          fail: function (error) {
            reject(error);
            tip.loaded();
          }
        });
      });
      if (!addressState) {
        return isPass = false
      }
      let cityInfo = await api.getCityInService({
        query: {
          invokeType: 2,
          longitude: addressState.longitude,
          latitude: addressState.latitude
        },
        showError: false
      });
      if (cityInfo && cityInfo.data && cityInfo.data.errCode == 0) {
        // wx.showModal({ content: `${cityInfo.data.data.city.address}` })
        cityInfo.data.data.city.city = cityInfo.data.data.city.cityName;
        api.znSetStorageSync(USER_CITY, cityInfo.data.data.city);
        return isPass = true;
      } else {
        console.log("cityInfo.data.errCode == 0")
        return isPass = "getCityInServiceFalse"
      }
    }

    // 需要绑定手机
    async needBindPhone(cb, fromUrl) {
      let that = this;
      let userInfo = await  api.znGetStorageSync(USER_SPECICAL_INFO);
      let isHasPhone = userInfo.userInfo.isActive;

      if (isHasPhone == 1) {
        cb();
      } else {
        if (fromUrl) {
          wx.navigateTo({
            url: '/pages/main/login?cb=' + encodeURIComponent(fromUrl)
          });
        }
      }
    }

    // 是否授权
    async isCanLogin() {
      let that = this;
      let wxUserInfo = await api.znGetStorageSync(USER_INFO);
      let userInfo = await api.znGetStorageSync(USER_SPECICAL_INFO);
      let cityInfo = await api.znGetStorageSync(USER_CITY);
      if (!wxUserInfo) {
        var pages = getCurrentPages();    //获取加载的页面
        var currentPage = pages[pages.length - 1];   //获取当前页面的对象
        var url = currentPage.route;   //当前页面url
        var options = currentPage.options;   //如果要获取
        //拼接url的参数
        var urlWithArgs = url;
        let optParams = ''
        for (var key in options) {
          if (options[key]) {
            var value = options[key]
            optParams += key + '=' + value + '&'
          }
        }
        optParams = optParams.substring(0, optParams.length - 1);
        if(optParams){
          urlWithArgs = urlWithArgs + "?" + optParams;
        }else{
          urlWithArgs = urlWithArgs;
        }

        var currentPage = pages[pages.length - 1];

        if (url != 'pages/main/authorization') {
          wx.redirectTo({
            url: '/pages/main/authorization?url=' + encodeURIComponent(urlWithArgs)
          });
        }
      }
    }

    // 获取设置，判断用户授权和定位权限是否打开
    async checkGetUserInfo() {
      wx.getSetting({
        success: (res) => {
          if (res.authSetting["scope.userInfo"]) {

          } else {
            api.znSetStorageSync(USER_INFO, '');
            return false;
          }
          if (res.authSetting["scope.userLocation"]) {

          } else {
            // return false;
          }
        }
      })
    }

    // 判断是否更新
    async checkUpdate() {
      if( wx.canIUse('getUpdateManager')){
        const updateManager = await wx.getUpdateManager()
        await updateManager.onCheckForUpdate(function (res) {
          // 请求完新版本信息的回调
          if (res.hasUpdate) {
            api.znSetStorageSync(USER_SPECICAL_INFO, '');
            api.znSetStorageSync(USER_INFO, '');
            api.znSetStorageSync(USER_CITY, '');
          }
        });
        await  updateManager.onUpdateReady(function () {
          wx.showModal({
            title: '更新提示',
            content: '版本已更新，请重启应用',
            showCancel: false,
            success: function (res) {
              if (res.confirm) {
                // 新的版本已经下载好，调用 applyUpdate 应用新版本并重启
                api.znSetStorageSync(USER_SPECICAL_INFO, '');
                api.znSetStorageSync(USER_INFO, '');
                api.znSetStorageSync(USER_CITY, '');
                updateManager.applyUpdate();
              }
            }
          })

        })
        await  updateManager.onUpdateFailed(function () {
          // 新的版本下载失败
        })
      }
    }

    // 注册 双十一活动 模板消息通知
    async msgNotification(formId) {
      //isQueryPromotionInviteUser
      let that = this;
      // TODO  注册模板消息通知 时间在11月1日~11月10日 发送
      let currentDate = new Date();
      let beginTime = new Date(2018, 10, 1, 0, 0, 0);
      let endTime = new Date(2018, 10, 11, 11, 11, 0);
      // let beginTime = new Date(2018, 9, 1, 0, 0, 0);
      // let endTime = new Date(2018, 10, 11, 11, 11, 0);

      // 判断是否有
      if (currentDate >= beginTime && currentDate <= endTime) {
          let result = await api.isQueryPromotionInviteUser({
            query:{
              promotionType: '11'
            }
          });
      }
    }

    // 判断是否为客户经理，是，返回客户经理邀请码，否，false
    async getCustMangerCode(openId){
      let that = this;
      let userSpecicalInfo = api.znGetStorageSync(USER_SPECICAL_INFO);
      let currentOpenid = userSpecicalInfo.userInfo.openId;
      if(currentOpenid != openId){

        let result = await  api.getCustMangerCode({
          query:{
            openId:openId
          },
          method:'POST'
        });

        if(result && result.data && result.data.errCode == 0){
          if(result.data.data.result != ''){
            //是客户经理
            console.log('分享所得的openid是----客户经理');
            if(result.data.data.result){

              that.getBuildStateCode(result.data.data.result);

            }else{
              console.log('分享所得的openid是----客户经理,但邀请码为空');
            }
          }else{
            //不是客户经理
            console.log('分享所得的openid不是----客户经理')
          }
        }

      }

    }

    // 判断是否绑定邀请码 是，返回客户经理邀请码，否，false
    async getBuildStateCode(code){
      let that = this;
      let result = await api.getCertification();
      if(result && result.data && result.data.errCode == 0){
        if(result.data.data.invitationCode){
          console.log('已经绑定客户邀请码')
        }else{
          that.buildCustManCode(code);
        }
      }
    }

    // 绑定邀请码
    async buildCustManCode(code){
      let that = this;
      let result = await api.setInvitationCode({
        method: 'POST',
        query:{
          invitationCode:code
        }
      });
      if(result && result.data && result.data.errCode == '0'){

      }
    }

    // 发送数据分析日志
    sendLogs() {
      ZnAnalyticsWx.sendAnalytics((params)=>{
        let userSpecicalInfo = api.znGetStorageSync(USER_SPECICAL_INFO);
        let url = api.apiMall=='https://api.zuul.pre.znlhzl.cn'?'https://api.zuul.znlhzl.cn':api.apiMall;
        wx.request({
          url:url+"/api-msc/api/v1/pipeline/collectWechatLog",
          method: 'POST',
          header:{
            "REQUEST-SOURCE":"1",
            "X-Auth-Token":userSpecicalInfo.userInfo.tokenId
          },
          data:JSON.stringify(params),
          success:()=>{
            ZnAnalyticsWx.setEmptyEvents();
            ZnAnalyticsWx.setEmptyErrors();
          }
        })
      })
    }

    //setWriteEnterInfoLog
    setWriteEnterInfoLog(title,path){
      this.setEnterPageLogs();
      this.setLeavePageLogs();
      this.setPageTitleLogs(title);
      this.setUrlLogs(path);
    }

    //setWriteEnterInfoLog
    setWriteLeaveInfoLog(){
      this.setLeavePageLogs();
      this.sendLogs();
    }

    // 数据采集 页面进入 获取进入时间
    setEnterPageLogs(){
      ZnAnalyticsWx.setEnterTime(new Date());
    }

    // 数据采集 页面离开
    setLeavePageLogs(){
      ZnAnalyticsWx.setLeaveTime(new Date());
    }

    // 数据采集 title
    setPageTitleLogs(title){
      ZnAnalyticsWx.setPageTitle(title);
    }

    // 数据采集 uid
    setUidLogs(val){
      ZnAnalyticsWx.setUid(val);
    }

    // 数据采集 openId
    setOpenIdLogs(val){
      ZnAnalyticsWx.setOpenId(val);
    }

    // 数据采集 sid
    setSidLogs(val){
      ZnAnalyticsWx.setSid(val);
    }

    // 数据采集 url
    setUrlLogs(val){
      ZnAnalyticsWx.setUrl(val);
    }

    // 数据采集 Referrer
    setReferrerLogs(val){
      ZnAnalyticsWx.setReferrer(val);
    }

    // 数据采集 events
    setEventsLogs(params){
      ZnAnalyticsWx.setEvents(params);
    }

    // 数据采集 error
    setErrorsLogs(params){
      let that = this;
      ZnAnalyticsWx.setErrors(params,()=>{
        that.sendLogs();
      });
    }



    //yeho
  }
</script>
